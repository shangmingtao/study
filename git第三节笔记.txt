第一节回顾:
两种方式第一次从远程仓库同步本地:第一种当github上已经有非空仓库的时候clone. 第二种github有空仓库,直接在本地memote add后push上去
git remote add [shortname(origin)] [url(不带.git)]
git clone [rul(不带.git)]
git push [remote(origin)] [branch(本地master)]
git pull [remote(origin)] [branch(本地master)]
git pull <远程主机名> <远程分支名>:<本地分支名>(如果本地没有这个分支，也会自动创建，和fetch一样)
clone和pull的区别:clone的目标文件夹必须是一个空文件夹,pull不是.一般第一次从远程仓库拉的时候用clone.

*重要* chone仅会把所有分支clone下来,同时会把所有tag clone下来，通过git branch -a查看所有分支，可以看到remote/origin/。。分支。如果第一次clone下来以后想同步远程分支（非master，master分支在clone时候已经自动追踪了）也建一个本地分支。可以通过git checkout先进到存在本地的远程分支里，然后git checkout -b <新的分支名字> 或者通过git checkout -b <新的分支名字> <目标分支名字 ， 如origin/dev>

*重要*      fetch这个命令更新所有远程仓库，拉取所有标签
           fetch <仓库名> 仅更新这个仓库，不拉取标签
           fetch <仓库名> —tags 仅更新这个仓库，拉取标签
1. git fetch            →→ 这将更新git remote 中所有的远程repo 所包含分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中
2. git fetch remote_repo         →→ 这将更新名称为remote_repo 的远程repo上的所有branch的最新commit-id，将其记录。 
3. git fetch remote_repo remote_branch_name        →→ 这将这将更新名称为remote_repo 的远程repo上的分支： remote_branch_name
4. git fetch remote_repo remote_branch_name:local_branch_name       →→ 这将这将更新名称为remote_repo 的远程repo上的分支： remote_branch_name ，并在本地创建local_branch_name 本地分支保存远端分支的所有数据。

在fetch之后删除掉没有与远程分支对应的本地分支 : git fetch -p




第三节回顾:
.gitignore说明 : 
.project #忽略一个文件
*.obj #忽略obj类型的文件
*.class #忽略class类型的文件

github给我们提供了很多.gitignore模板

查看.project是被哪里ignore的:git check-ignore -v .project


换行:
CR:carriage return 回车,光标到首行 ,'\r' = return
LF:line feed 换行 ,光标下移一行 , '\n'= newline
linux:换行 \n
windows:换行 \r\n
mac: \r

打印配置信息
git config --list
提交时转换为LF,检出的时候转换为CRLF,默认设置不用修改,git是linux配置
git config --global core.autocrlf true
不打印:
{warning: LF will be replaced by CRLF in a.
The file will have its original line endings in your working directory.
}
git config --global core.safecrlf false


git log在一行:git log --oneline
以图形方式打印log(没有成功) : git log --pretty=format: '%h %ad | %s%d [%an]' --graph --date=short
设置别名:git config --global alias.ci commit
存储凭证(没有试):git config --blobal credential.helper wincred

SSH协议要配置密钥对:
生成RSA密钥对(邮箱是github的邮箱) : $ ssh-Keygen -t rsa -C "shangmingtao@126.com"    

git命令(进阶):
打印所有git子命令: git help -a

逐行查看文件修改历史:git blame <file name>
从第100行开始到110行: git blame -L 100,110 <file name>

罗列出没放到暂存区的文件:git clean -n
把前一条罗列的删除掉:git clean -f
把前一条罗列的删除掉(连ignore中忽略也删除):git clean -x -f

简短打出git status : git status -sb


git删除:
git rm (删除的暂存区和物理路径下的文件) D(绿色)_ 代表缓存区和物理路径删除了.可以再次执行commit
rm(删除的是w物理路径) _D(红色) 代表物理路径删了(即工作区删了),但是缓存区和仓库都没有删.所以要先add再commit才能删掉
一个文件已经提交到了仓库,修改这个文件 _M(红色) 代表了从工作区到缓存区修改了.(modify)

git移动
git mv (是在暂存区和物理路径下移动) R(绿色)_ 代表缓存区和物理路径都移动了,可以再次执行commit
mv (暂存区不动) a的status： _D(红色) b的status：？？此时把两个文件都add执行git status命令结果为：R（正常颜色）_ b-》a，然后commit后。commit结果为rename a=》b 证明git并不是用文件名存储的，而是存储的文件内容

创建文件夹是不会被跟踪的，里边有文件了才会被跟踪

分块添加：git add -P 
【y，n，q，a，d，/，s，e，？】
y：yes
n：no
q：quit
s：split分割
e：手工编辑
d：退出s
选择s选择两部分（共计三部分）后查看git status 提示：M（绿色）M（红色）
工作区和暂存区的比对：git diff 
暂存区和本地仓库比对：git diff —cached

最后一次提交详情：git show Head
倒数第二个提交详情：git show Head&^ 

commit message的书写规范：每一行不能超过72个字符
<type>(<scope>):<subject>
//空行
<body>
//空行
<footer>

feat:新功能（feature）
fix：修复bug
docs：文档
style：格式
refactor：重构
test：增加测试
chore：构建过程或辅助工具变动


简要信息：git status -sb
查看某个提交信息：git show HEAD(这里也可以是hash，或者HEAD指针 HEAD~3)
查看提交历史：git log <file name>
	   git log —grep <msg>
	   git log -n


版本库中的两个版本的差异：git diff da985 b325dc
暂存区和版本库的差异：git diff —-cached (这个后边也可以加HEAD~4或者<tag name>这些东西)
暂存区和工作区的差异：git diff
工作区和版本库的差异：git diff HEAD
工作区和版本库历史版本差异：git diff da985
工作区和某个tag的差异：git diff <tag name>

回撤操作：
回撤暂存区内容到工作目录：git reset HEAD
回撤提交到暂存区：git reset HEAD —-soft
回撤提交，放弃变更：git reset HEAD —-hard
回撤远程仓库：git push -f（—- force）
回撤上一次提交（只能回撤一次）：git commit —-amend -m “message”
变基操作，改写历史提交：git rebase -i HEAD~3

soft:git reset --soft HEAD～1 意为将版本库软回退1个版本，所谓软回退表示将本地版本库的头指针全部重置到指定版本，且将这次提交之后的所有变更都移动到暂存区
mixed(default):git reset HEAD～1 意为将版本库回退1个版本，将本地版本库的头指针全部重置到指定版本，且会重置暂存区，即这次提交之后的所有变更都移动到未暂存阶段
hard:git reset --hard HEAD～1 意为将版本库回退1个版本，但是不仅仅是将本地版本库的头指针全部重置到指定版本，也会重置暂存区，并且会将工作区代码也回退到这个版本 
PS:soft->mixed->hard着重强调了级别，soft仅回退版本库，mixed回退版本库+暂存区，hard回退版本库+暂存区+工作区   


tag（标签）操作
打标签：git tag foo -m <msg>
在当前版本4个版本上打标签 ： git tag foo HEAD~4
列出标签： git tag
删除标签：git tag -d  <tag name> （没merge过的分支要用下边的-D删除）
	git tag -D  <tag name> 
把标签推到远程：git push origin —tags (正常的push是不会吧tag推上去的)
	     git push origin v0.1 (单个push)
把标签从远程拉回本地：git pull origin —tags (git fetch origin --tags 和这个pull好像是一样的.不需要merge)
删除远程标签：git push origin :refs/tags/v0.0 (这个命令不影响本地标签,所以如果想同步标签可以先删除本地所有标签,然后把远程的都拽下来) 
查看标签详情：git show <tag name>


git分支操作：
新建分支：git branch iss53
切换分支：git checkout <分支名字>
分支列表：git branch
合并：git merge <要合并的分支>（要切换到合并目标分支）
删除分支：git branch -d hotfix
查看分支详情： git branch -v （会打印现在HEAD）
冲突提示 ：CONFLICT (content): Merge conflict in a （证明冲突在a上）
冲突提示：或者我们通过git status查看 U（红色）U（红色）

git切换分支时可能提示有未提交的文件,这种情况是因为本分支的改动与目标要移动到的分支有同样的文件,且这个文件修改前的hash是不一样.
如master分支A文件所在commit=efefef  dev分支A文件所在commit=efefef  dev改动了A文件,此时直接checkout到master是可以的
但是如果此时dev分支新增了A文件那么dev分支的A文件commit=null,此时checkout切换分支是不可以的.这里的commit=efefef就是commit的hash


远程:
获取远程分支和tags列表:git ls-remote

# 保存进度
git stash
# 弹出进度
git stash pop
# 查看 stash 列表
git stash list
# 删除 stash 列表
git stash clear

*重要*： git stash -u 代表工作区未追踪的也会保存
        git stash pop —index 代表缓存区的也会恢复 如果不加，默认是不会回复缓存区的，缓存区内容会移动到工作区。详见笔记stash本地网页
        git stash apply 不删除stash
apply和pop均不允许在本地放生改变时执行。必须解决好冲突,而且有一个重要概念，工作区和暂存区是唯一的，不管当前现在那个分支上，所以当在A分支上stash 在B分支上stash pop的话，很有可能和当前工作区和暂存区的内容是冲突的，这时候要解决好冲突。也就是stash pop时候也有可能发生冲突。在A分支shash更改A内容也有可能发生冲突的。



不管是git fetch还是git pull都要求工作区和缓存区不能有东西.需要先保存进度.当用fetch的时候会包远程保存在一个origin/dev的分支中.然后需要切换到dev分支把origin/dev分支merge进来.并且这个origin/dev的分支在本地分支列表中是看不到的.



当我们需要检出某个版本出来的时候可以通过git branch <新的分支名字> <版本号或者hash>新建分支并检出
然后git checkout 到新分支名字就ok了


 









